package me.revqz.bountyplugin;

import net.milkbowl.vault.economy.Economy;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.plugin.RegisteredServiceProvider;
import org.bukkit.plugin.java.JavaPlugin;

import java.util.*;
import java.util.stream.Collectors;

public class BountyPlugin extends JavaPlugin implements Listener {
    private final Map<UUID, Double> bounties = new HashMap<>();
    private Economy economy;
    private FileConfiguration config;

    @Override
    public void onEnable() {
        saveDefaultConfig();
        config = getConfig();
        loadBounties();
        setupEconomy();
        
        getServer().getPluginManager().registerEvents(this, this);
        this.getCommand("setbounty").setExecutor(new SetBountyCommand());
        this.getCommand("bountylist").setExecutor(new BountyListCommand());
    }

    private void setupEconomy() {
        RegisteredServiceProvider<Economy> rsp = getServer().getServicesManager().getRegistration(Economy.class);
        if (rsp != null) economy = rsp.getProvider();
    }

    private void loadBounties() {
        if (config.contains("bounties")) {
            config.getConfigurationSection("bounties").getKeys(false).forEach(key ->
                bounties.put(UUID.fromString(key), config.getDouble("bounties." + key)));
        }
    }

    private void saveBounties() {
        for (Map.Entry<UUID, Double> entry : bounties.entrySet()) {
            config.set("bounties." + entry.getKey().toString(), entry.getValue());
        }
        saveConfig();
    }

    public class SetBountyCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "Only players can use this command.");
                return true;
            }
            if (args.length != 2) {
                sender.sendMessage(ChatColor.RED + "Usage: /setbounty <player> <amount>");
                return true;
            }

            Player target = Bukkit.getPlayer(args[0]);
            if (target == null) {
                sender.sendMessage(ChatColor.RED + "Player not found.");
                return true;
            }

            double amount;
            try {
                amount = Double.parseDouble(args[1]);
                if (amount <= 0) throw new NumberFormatException();
            } catch (NumberFormatException e) {
                sender.sendMessage(ChatColor.RED + "Invalid amount. Must be a positive number.");
                return true;
            }

            Player player = (Player) sender;
            if (!economy.withdrawPlayer(player, amount).transactionSuccess()) {
                sender.sendMessage(ChatColor.RED + "You do not have enough money to place this bounty.");
                return true;
            }

            bounties.put(target.getUniqueId(), bounties.getOrDefault(target.getUniqueId(), 0.0) + amount);
            saveBounties();
            sender.sendMessage(ChatColor.GREEN + "Bounty placed on " + target.getName() + " for $" + amount);
            return true;
        }
    }

    public class BountyListCommand implements CommandExecutor {
        @Override
        public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "Only players can use this command.");
                return true;
            }
            openBountyListGUI((Player) sender);
            return true;
        }
    }

    private void openBountyListGUI(Player player) {
        List<UUID> bountyTargets = new ArrayList<>(bounties.keySet());
        int size = ((bountyTargets.size() - 1) / 9 + 1) * 9;
        Inventory gui = Bukkit.createInventory(null, size, ChatColor.DARK_RED + "Active Bounties");

        for (UUID uuid : bountyTargets) {
            OfflinePlayer target = Bukkit.getOfflinePlayer(uuid);
            ItemStack skull = new ItemStack(Material.PLAYER_HEAD);
            SkullMeta meta = (SkullMeta) skull.getItemMeta();
            if (meta != null) {
                meta.setOwningPlayer(target);
                meta.setDisplayName(ChatColor.WHITE + target.getName());
                meta.setLore(Collections.singletonList(ChatColor.GREEN + "Bounty: $" + bounties.get(uuid)));
                skull.setItemMeta(meta);
            }
            gui.addItem(skull);
        }
        player.openInventory(gui);
    }

    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        if (event.getView().getTitle().equals(ChatColor.DARK_RED + "Active Bounties")) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onPlayerDeath(PlayerDeathEvent event) {
        Player player = event.getEntity();
        Player killer = player.getKiller();
        if (killer == null || !bounties.containsKey(player.getUniqueId())) return;

        double reward = bounties.remove(player.getUniqueId());
        economy.depositPlayer(killer, reward);
        saveBounties();

        Bukkit.broadcastMessage(ChatColor.GOLD + killer.getName() + " has claimed a bounty of $" + reward + " for eliminating " + player.getName() + "!");
    }
}
